% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/data_interface.R
\name{sedona_read_wkt}
\alias{sedona_read_wkt}
\title{Create a SpatialRDD from a Well-Known Text (WKT) data source.}
\usage{
sedona_read_wkt(
  sc,
  location,
  wkt_col_idx = 0L,
  allow_invalid_geometries = TRUE,
  skip_syntactically_invalid_geometries = TRUE,
  storage_level = "MEMORY_ONLY",
  repartition = 1L
)
}
\arguments{
\item{sc}{A \code{spark_connection}.}

\item{location}{Location of the data source.}

\item{wkt_col_idx}{Zero-based index of column containing hex-encoded WKB data
(default: 0).}

\item{allow_invalid_geometries}{Whether to allow topology-invalid
geometries to exist in the resulting RDD.}

\item{skip_syntactically_invalid_geometries}{Whether to allows Sedona to
automatically skip syntax-invalid geometries, rather than throwing
errorings.}

\item{storage_level}{Storage level of the RDD (default: MEMORY_ONLY).}

\item{repartition}{The minimum number of partitions to have in the resulting
RDD (default: 1).}
}
\description{
Create a generic SpatialRDD from a Well-Known Text (WKT) data source.
}
\examples{
library(sparklyr)
library(sparklyr.sedona)

sc <- spark_connect("spark://HOST:PORT")

if (!inherits(sc, "test_connection")) {
  input_location <- system.file(
    file.path("extdata", "wkt-example.tsv"), package = "sparklyr.sedona"
  )
  rdd <- sedona_read_wkt(
    sc,
    location = input_location,
    wkt_col_idx = 0L
  )
}

}
\seealso{
Other Sedona data inferface functions: 
\code{\link{sedona_read_dsv_to_typed_rdd}()},
\code{\link{sedona_read_geojson_to_typed_rdd}()},
\code{\link{sedona_read_geojson}()},
\code{\link{sedona_read_shapefile}()},
\code{\link{sedona_read_wkb}()},
\code{\link{sedona_save_spatial_rdd}()},
\code{\link{sedona_write_geojson}()},
\code{\link{sedona_write_wkb}()},
\code{\link{sedona_write_wkt}()}
}
\concept{Sedona data inferface functions}
